IsoEBDERes=GetDEResults(IsoEBOut, FDR=0.05)
str(IsoEBDERes$DEfound)
head(IsoEBDERes$PPMat)
str(IsoEBDERes$Status)
data(MultiGeneMat)
str(MultiGeneMat)
Conditions=c("C1","C1","C2","C2","C3","C3")
MultiSize=MedianNorm(MultiGeneMat)
MultiOut=EBMultiTest(MultiGeneMat,NgVector=NULL,Conditions=Conditions,
AllParti=Parti, sizeFactors=MultiSize, maxround=5)
MultiOut=EBMultiTest(MultiGeneMat,Conditions=Conditions,
sizeFactors=MultiSize, uc = 2)
MultiPP=GetMultiPP(MultiOut)
names(MultiPP)
MultiPP$PP[1:10,]
MultiPP$MAP[1:10]
MultiPP$Patterns
data(IsoMultiList)
IsoMultiMat=IsoMultiList[[1]]
IsoNames.Multi=IsoMultiList$IsoNames
IsosGeneNames.Multi=IsoMultiList$IsosGeneNames
IsoMultiSize=MedianNorm(IsoMultiMat)
NgList.Multi=GetNg(IsoNames.Multi, IsosGeneNames.Multi)
IsoNgTrun.Multi=NgList.Multi$IsoformNgTrun
Conditions=c("C1","C1","C2","C2","C3","C3","C4","C4")
PosParti.4Cond=GetPatterns(Conditions)
PosParti.4Cond
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 3)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2)
?EBMultiTest
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 3)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 4)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,nequal = 4)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 3,nequal = 4)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 3,nequal = 2)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,nequal = 2)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,thre = 1)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,thre = 1)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,thre = 1)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2)
IsoMultiPP=GetMultiPP(IsoMultiOut)
names(MultiPP)
IsoMultiPP$PP[1:10,]
IsoMultiPP$MAP[1:10]
IsoMultiPP$Patterns
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1)
IsoMultiPP$Patterns
IsoMultiPP=GetMultiPP(IsoMultiOut)
names(MultiPP)
IsoMultiPP$PP[1:10,]
IsoMultiPP$MAP[1:10]
IsoMultiPP$Patterns
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1, thre = 10)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1, thre = 1000)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1, sthre = 0)
data(GeneMat)
Sizes=MedianNorm(GeneMat)
EBOut=EBTest(Data=GeneMat,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=Sizes, maxround=5)
EBDERes=GetDEResults(EBOut, FDR=0.05)
EBDERes=GetDEResults(EBOut, FDR=0.05)
str(EBDERes$DEfound)
head(EBDERes$PPMat)
str(EBDERes$Status)
EBMultiTest
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2)
IsoMultiOut$NumUC
x = IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1)
y = IsoMultiOut$NumUC
x - y
x == y
sum(x != y)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,thre = 100)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,nequal = 10)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 10)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,nequal = 10)
IsoMultiOut$NumUC
IsoMultiPP$Patterns
IsoMultiPP=GetMultiPP(IsoMultiOut)
names(MultiPP)
IsoMultiPP$Patterns
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 10)
IsoMultiOut$NumUC
IsoMultiPP=GetMultiPP(IsoMultiOut)
IsoMultiPP$Patterns
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 10, thre = 1000)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 10, filter= 1)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 10, filter= 2)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 1)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 2)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal =3)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 0)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 0)
x = IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 1)
y = IsoMultiOut$NumUC
y
y - x
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 2)
y = IsoMultiOut$NumUC
y - x
y
x
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 10)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,thre = 100)
IsoMultiOut$NumUC
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,thre = 100)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,thre = 100)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,thre = 100)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 10)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,nequal = 10)
library(scDDboost)
ls
PDD
data(sim_dat)
ls()
library(SummarizedExperiment)
data_count = assays(sim_dat)$counts
conditions = colData(sim_dat)$conditions
rownames(data_count) = 1:500
data_counts = assays(sim_dat)$counts
conditions = colData(sim_dat)$conditions
rownames(data_counts) = 1:500
head(data_counts)
rownames(data_counts)
dim(data_counts)
rownames(data_counts) = 1:1000
##here we use 1 core to compute the distance matrix
D = cal_D(data_count,1)
##here we use 1 core to compute the distance matrix
D_c = cal_D(data_count,1)
rm(data_count)
##here we use 1 core to compute the distance matrix
D_c = cal_D(data_counts,1)
##here we use 1 core to compute the distance matrix
D_c = cal_D(data_counts,1)
##number of subtypes
K = detK(D_c)
ccl = pam(D_c,k = K)$clustering
K
pdd = PDD(data = data_counts,cd = conditions, ncores = 1, D = D_c)
EDD = which(res > 0.95)
EDD = whichpdd > 0.95)
EDD = which(pdd > 0.95)
EDD
length(EDD)
PDD
detK
lsz
lsz(pdd)
lsz(pdd,0.05)
library(EBSeq)
GetPatterns()
GetPatterns
EBMultiTest
GetPatterns
EBMultiTest
MultiSize=MedianNorm(MultiGeneMat)
library(EBSeq)
MultiSize=MedianNorm(MultiGeneMat)
MultiOut=EBMultiTest(MultiGeneMat,Conditions=Conditions,
sizeFactors=MultiSize, uc = 2)
data(MultiGeneMat)
str(MultiGeneMat)
Conditions=c("C1","C1","C2","C2","C3","C3")
MultiSize=MedianNorm(MultiGeneMat)
MultiOut=EBMultiTest(MultiGeneMat,Conditions=Conditions,
sizeFactors=MultiSize, uc = 2)
PosParti=GetPatterns(MultiOut)
PosParti
data(IsoMultiList)
dim(IsoMultiList)
dim(IsoMultiMat)
data(IsoMultiList)
Conditions=c("C1","C1","C2","C2","C3","C3","C4","C4")
IsoMultiMat=IsoMultiList[[1]]
IsoNames.Multi=IsoMultiList$IsoNames
IsosGeneNames.Multi=IsoMultiList$IsosGeneNames
IsoMultiSize=MedianNorm(IsoMultiMat)
NgList.Multi=GetNg(IsoNames.Multi, IsosGeneNames.Multi)
IsoNgTrun.Multi=NgList.Multi$IsoformNgTrun
IsoMultiOut=EBMultiTest(IsoMultiMat,NgVector=IsoNgTrun.Multi,Conditions=Conditions,
AllParti=Parti.4Cond,
sizeFactors=IsoMultiSize, maxround=5)
IsoMultiOut=EBMultiTest(IsoMultiMat,NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize, uc = 2)
IsoMultiPP=GetMultiPP(IsoMultiOut)
names(MultiPP)
IsoMultiPP$PP[1:10,]
IsoMultiPP$MAP[1:10]
IsoMultiPP$Patterns
IsoMultiFC=GetMultiFC(IsoMultiOut)
PosParti.4Cond=GetPatterns(IsoMultiOut)
PosParti.4Cond
PlotPattern(PosParti.4Cond)
Parti.4Cond=PosParti.4Cond[c(1,2,3,8,15),]
Parti.4Cond
PlotPattern(PosParti.4Cond)
EBOut$Alpha
EBOut$Beta[1:5]
EBOut$P
EBTest
IsoSizes=MedianNorm(IsoMat)
IsoEBOut=EBTest(Data=IsoMat, NgVector=IsoNgTrun,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=IsoSizes)
IsoEBOut=EBTest(Data=IsoMat, NgVector=IsoNgTrun,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=IsoSizes,stopthre = 1e-4)
IsoEBDERes=GetDEResults(IsoEBOut, FDR=0.05)
IsoEBOut=EBTest(Data=IsoMat, NgVector=IsoNgTrun,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=IsoSizes,step2 = 1e-5)
IsoEBOut=EBTest(Data=IsoMat, NgVector=IsoNgTrun,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=IsoSizes,step2 = 1e-5,stopthre = 1e-6)
IsoEBOut=EBTest(Data=IsoMat, NgVector=IsoNgTrun,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=IsoSizes,step2 = 1e-5,stopthre = 1e-10)
IsoEBOut=EBTest(Data=IsoMat, NgVector=IsoNgTrun,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=IsoSizes,step1 = 1e-1,step2 = 1e-5,stopthre = 1e-10)
IsoEBOut=EBTest(Data=IsoMat, NgVector=IsoNgTrun,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=IsoSizes,step1 = 1e-2,step2 = 1e-5,stopthre = 1e-10)
IsoEBOut=EBTest(Data=IsoMat, NgVector=IsoNgTrun,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=IsoSizes,step1 = 1e-3,step2 = 1e-5,stopthre = 1e-10,sthre = 0)
IsoEBOut=EBTest(Data=IsoMat, NgVector=IsoNgTrun,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=IsoSizes,step1 = 1e-6,step2 = 1e-5,stopthre = 1e-10)
IsoEBDERes=GetDEResults(IsoEBOut, FDR=0.05)
IsoEBOut$Alpha
IsoEBOut$Beta[1:5]
IsoEBOut=EBTest(Data=IsoMat, NgVector=IsoNgTrun,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=IsoSizes,step2 = 1e-5,stopthre = 1e-10)
IsoEBOut=EBTest(Data=IsoMat, NgVector=IsoNgTrun,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=IsoSizes,step2 = 1e-5)
IsoEBDERes=GetDEResults(IsoEBOut, FDR=0.05)
IsoEBOut$Alpha
IsoEBOut$Beta[1:5]
IsoEBOut$P
unique(IsoEBOut$Beta)
IsoEBOut=EBTest(Data=IsoMat, NgVector=IsoNgTrun,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=IsoSizes,step2 = 1e-4)
IsoEBOut=EBTest(Data=IsoMat, NgVector=IsoNgTrun,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=IsoSizes,step2 = 1e-4)
IsoEBDERes=GetDEResults(IsoEBOut, FDR=0.05)
IsoEBOut$Alpha
unique(IsoEBOut$Beta)
IsoEBOut$P
548 / 555
542 / 555
load("sim_p.RData")
library(ggplot2)
NM = c("3/0.1/0.4","3/-0.1/0.3","3/0.3/0.5","3/-0.1/1","7/0.1/0.4","7/-0.1/0.3","7/0.3/0.5","7/-0.1/1","12/0.1/0.4","12/-0.1/0.3","12/0.3/0.5","12/-0.1/1")
pdf("~/Desktop/simuTPR.pdf", height = 6, width = 10)
par(mar=c(7,5,4,1)+.1)
ORD = order(TP_scb)
plot(TP_scb[ORD], type = "b", lwd = 3, col = "green",
ylab = "", xaxt = 'n', xlab = "", ylim = c(-0.04,0.55))
mtext("TPR", side=2, line=2.2, cex=1.2, yaxt = 'n')
lines(TP_des[ORD] , type = "b", lwd = 3, col = "red")
lines( TP_sc[ORD] , type = "b", lwd = 3, col = "blue")
lines( TP_mst[ORD] , type = "b", lwd = 3)
axis(1, at=1:12, labels = NM[ORD],cex.axis= 1.2, las = 2)
legend("topleft", legend=c("MAST", "DESeq2", "scDD", "scDDboost"),
col=c("black", "red", "blue","green"),lty = 1, cex = 1.2,lwd = 4)
dev.off()
pdf("~/Desktop/simuTPR.pdf", height = 6, width = 10)
par(mar=c(7,5,4,1)+.1)
ORD = order(TP_scb)
plot(TP_scb[ORD], type = "b", lwd = 3, col = "green",
ylab = "", xaxt = 'n', xlab = "", ylim = c(-0.04,0.55))
mtext("TPR", side=2, line=2.2, cex=1.2, yaxt = 'n')
plot.new()
load("sim_p.RData")
library(ggplot2)
NM = c("3/0.1/0.4","3/-0.1/0.3","3/0.3/0.5","3/-0.1/1","7/0.1/0.4","7/-0.1/0.3","7/0.3/0.5","7/-0.1/1","12/0.1/0.4","12/-0.1/0.3","12/0.3/0.5","12/-0.1/1")
pdf("~/Desktop/simuTPR.pdf", height = 6, width = 10)
par(mar=c(7,5,4,1)+.1)
ORD = order(TP_scb)
plot(TP_scb[ORD], type = "b", lwd = 3, col = "green",
ylab = "", xaxt = 'n', xlab = "", ylim = c(-0.04,0.55))
mtext("TPR", side=2, line=2.2, cex=1.2, yaxt = 'n')
lines(TP_des[ORD] , type = "b", lwd = 3, col = "red")
lines( TP_mst[ORD] , type = "b", lwd = 3)
load("sim_p.RData")
library(ggplot2)
NM = c("3/0.1/0.4","3/-0.1/0.3","3/0.3/0.5","3/-0.1/1","7/0.1/0.4","7/-0.1/0.3","7/0.3/0.5","7/-0.1/1","12/0.1/0.4","12/-0.1/0.3","12/0.3/0.5","12/-0.1/1")
par(mar=c(7,5,4,1)+.1)
ORD = order(TP_scb)
plot(TP_scb[ORD], type = "b", lwd = 2, col = "green",
ylab = "", xaxt = 'n', xlab = "", ylim = c(-0.04,0.55))
mtext("TPR", side=2, line=2.2, cex=1.2, yaxt = 'n')
lines(TP_des[ORD] , type = "b", lwd = 2, col = "red")
lines( TP_sc[ORD] , type = "b", lwd = 2, col = "blue")
lines( TP_mst[ORD] , type = "b", lwd = 2)
pdf("~/Desktop/simuTPR.pdf", height = 6, width = 10)
par(mar=c(7,5,4,1)+.1)
ORD = order(TP_scb)
plot(TP_scb[ORD], type = "b", lwd = 2, col = "green",
ylab = "", xaxt = 'n', xlab = "", ylim = c(-0.04,0.55))
mtext("TPR", side=2, line=2.2, cex=1.2, yaxt = 'n')
lines(TP_des[ORD] , type = "b", lwd = 2, col = "red")
lines( TP_sc[ORD] , type = "b", lwd = 2, col = "blue")
lines( TP_mst[ORD] , type = "b", lwd = 2)
axis(1, at=1:12, labels = NM[ORD],cex.axis= 1.2, las = 2)
legend("topleft", legend=c("MAST", "DESeq2", "scDD", "scDDboost"),
col=c("black", "red", "blue","green"),lty = 1, cex = 1.2,lwd = 4)
dev.off()
pdf("~/Desktop/simuFDR.pdf", height = 6, width = 10)
par(mar=c(7,5,4,1)+.1)
plot(FDR_scb[ORD], type = "b", lwd = 2, col = "green",
ylab = "", xaxt = 'n', xlab = "", ylim = c(-0.025 / 2,0.15))
abline(a=0.05,b=0,lwd = 4,lty = 2,col = "orange")
mtext("FDR", side=2, line=2.2, cex=1.2, yaxt = 'n')
lines(FDR_des[ORD] , type = "b", lwd = 2, col = "red")
lines( FDR_sc[ORD] , type = "b", lwd = 2, col = "blue")
lines( FDR_mst[ORD] , type = "b", lwd = 2)
axis(1, at=1:12, labels = NM[ORD],cex.axis= 1.2, las = 2)
legend("topleft", legend=c("MAST", "DESeq2", "scDD", "scDDboost"),
col=c("black", "red", "blue","green"),lty = 1, cex = 1.2,lwd = 4)
dev.off()
pdf("~/Desktop/simuFDR.pdf", height = 6, width = 10)
par(mar=c(7,5,4,1)+.1)
linewidth = 3
plot(FDR_scb[ORD], type = "b", lwd = linewidth, col = "green",
ylab = "", xaxt = 'n', xlab = "", ylim = c(-0.025 / 2,0.15))
abline(a=0.05,b=0,lwd = linewidth,lty = 2,col = "orange")
mtext("FDR", side=2, line=2.2, cex=1.2, yaxt = 'n')
lines(FDR_des[ORD] , type = "b", lwd = linewidth, col = "red")
lines( FDR_sc[ORD] , type = "b", lwd = linewidth, col = "blue")
lines( FDR_mst[ORD] , type = "b", lwd = linewidth)
axis(1, at=1:12, labels = NM[ORD],cex.axis= 1.2, las = 2)
legend("topleft", legend=c("MAST", "DESeq2", "scDD", "scDDboost"),
col=c("black", "red", "blue","green"),lty = 1, cex = 1.2,lwd = 4)
dev.off()
pdf("~/Desktop/simuTPR.pdf", height = 6, width = 10)
ORD = order(TP_scb)
linewidth = 3
plot(TP_scb[ORD], type = "b", lwd = linewidth, col = "green",
ylab = "", xaxt = 'n', xlab = "", ylim = c(-0.04,0.55))
mtext("TPR", side=2, line=2.2, cex=1.2, yaxt = 'n')
lines(TP_des[ORD] , type = "b", lwd = linewidth, col = "red")
lines( TP_sc[ORD] , type = "b", lwd = linewidth, col = "blue")
lines( TP_mst[ORD] , type = "b", lwd = linewidth)
axis(1, at=1:12, labels = NM[ORD],cex.axis= 1.2, las = 2)
legend("topleft", legend=c("MAST", "DESeq2", "scDD", "scDDboost"),
col=c("black", "red", "blue","green"),lty = 1, cex = 1.2,lwd = linewidth)
dev.off()
pdf("~/Desktop/simuFDR.pdf", height = 6, width = 10
)
par(mar=c(7,5,4,1)+.1)
linewidth = 3
plot(FDR_scb[ORD], type = "b", lwd = linewidth, col = "green",
ylab = "", xaxt = 'n', xlab = "", ylim = c(-0.025 / 2,0.15))
abline(a=0.05,b=0,lwd = linewidth,lty = 2,col = "orange")
mtext("FDR", side=2, line=2.2, cex=1.2, yaxt = 'n')
lines(FDR_des[ORD] , type = "b", lwd = linewidth, col = "red")
lines( FDR_sc[ORD] , type = "b", lwd = linewidth, col = "blue")
lines( FDR_mst[ORD] , type = "b", lwd = linewidth)
axis(1, at=1:12, labels = NM[ORD],cex.axis= 1.2, las = 2)
legend("topleft", legend=c("MAST", "DESeq2", "scDD", "scDDboost"),
col=c("black", "red", "blue","green"),lty = 1, cex = 1.2,lwd = linewidth)
dev.off()
