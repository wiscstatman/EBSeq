library(EBSeq)
data(GeneMat)
str(GeneMat)
Sizes=MedianNorm(GeneMat)
#EBOut=EBTest(Data=GeneMat,
#Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=Sizes, maxround=5)
EBOut = EBTest(Data=GeneMat, Conditions=as.factor(rep(c("C1","C2"),each=5)),
sizeFactors = Sizes)
EBDERes=GetDEResults(EBOut, FDR=0.05)
str(EBDERes$DEfound)
head(EBDERes$PPMat)
str(EBDERes$Status)
data(IsoList)
str(IsoList)
IsoMat=IsoList$IsoMat
str(IsoMat)
IsoNames=IsoList$IsoNames
IsosGeneNames=IsoList$IsosGeneNames
IsoSizes=MedianNorm(IsoMat)
NgList=GetNg(IsoNames, IsosGeneNames)
IsoNgTrun=NgList$IsoformNgTrun
IsoNgTrun[c(1:3,201:203,601:603)]
?EBTest
EBTest
IsoEBOut = EBTest(Data=IsoMat, NgVector=IsoNgTrun,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=IsoSizes)
IsoEBDERes=GetDEResults(IsoEBOut, FDR=0.05)
str(IsoEBDERes$DEfound)
head(IsoEBDERes$PPMat)
str(IsoEBDERes$Status)
data(MultiGeneMat)
str(MultiGeneMat)
Conditions=c("C1","C1","C2","C2","C3","C3")
MultiSize=MedianNorm(MultiGeneMat)
MultiOut=EBMultiTest(MultiGeneMat,NgVector=NULL,Conditions=Conditions,
AllParti=Parti, sizeFactors=MultiSize, maxround=5)
MultiOut=EBMultiTest(MultiGeneMat,Conditions=Conditions,
sizeFactors=MultiSize, uc = 2)
MultiPP=GetMultiPP(MultiOut)
names(MultiPP)
MultiPP$PP[1:10,]
MultiPP$MAP[1:10]
MultiPP$Patterns
data(IsoMultiList)
IsoMultiMat=IsoMultiList[[1]]
IsoNames.Multi=IsoMultiList$IsoNames
IsosGeneNames.Multi=IsoMultiList$IsosGeneNames
IsoMultiSize=MedianNorm(IsoMultiMat)
NgList.Multi=GetNg(IsoNames.Multi, IsosGeneNames.Multi)
IsoNgTrun.Multi=NgList.Multi$IsoformNgTrun
Conditions=c("C1","C1","C2","C2","C3","C3","C4","C4")
PosParti.4Cond=GetPatterns(Conditions)
PosParti.4Cond
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 3)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2)
?EBMultiTest
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 3)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 4)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,nequal = 4)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 3,nequal = 4)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 3,nequal = 2)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,nequal = 2)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,thre = 1)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,thre = 1)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,thre = 1)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2)
IsoMultiPP=GetMultiPP(IsoMultiOut)
names(MultiPP)
IsoMultiPP$PP[1:10,]
IsoMultiPP$MAP[1:10]
IsoMultiPP$Patterns
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1)
IsoMultiPP$Patterns
IsoMultiPP=GetMultiPP(IsoMultiOut)
names(MultiPP)
IsoMultiPP$PP[1:10,]
IsoMultiPP$MAP[1:10]
IsoMultiPP$Patterns
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1, thre = 10)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1, thre = 1000)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1, sthre = 0)
data(GeneMat)
Sizes=MedianNorm(GeneMat)
EBOut=EBTest(Data=GeneMat,
Conditions=as.factor(rep(c("C1","C2"),each=5)),sizeFactors=Sizes, maxround=5)
EBDERes=GetDEResults(EBOut, FDR=0.05)
EBDERes=GetDEResults(EBOut, FDR=0.05)
str(EBDERes$DEfound)
head(EBDERes$PPMat)
str(EBDERes$Status)
EBMultiTest
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2)
IsoMultiOut$NumUC
x = IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1)
y = IsoMultiOut$NumUC
x - y
x == y
sum(x != y)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,thre = 100)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,nequal = 10)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 10)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,nequal = 10)
IsoMultiOut$NumUC
IsoMultiPP$Patterns
IsoMultiPP=GetMultiPP(IsoMultiOut)
names(MultiPP)
IsoMultiPP$Patterns
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 10)
IsoMultiOut$NumUC
IsoMultiPP=GetMultiPP(IsoMultiOut)
IsoMultiPP$Patterns
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 10, thre = 1000)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 10, filter= 1)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 10, filter= 2)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 1)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 2)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal =3)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 0)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 0)
x = IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 1)
y = IsoMultiOut$NumUC
y
y - x
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 2)
y = IsoMultiOut$NumUC
y - x
y
x
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 10)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,thre = 100)
IsoMultiOut$NumUC
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,thre = 100)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,thre = 100)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,thre = 100)
IsoMultiOut$NumUC
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 2,nequal = 10)
IsoMultiOut=EBMultiTest(IsoMultiMat,
NgVector=IsoNgTrun.Multi,Conditions=Conditions,
sizeFactors=IsoMultiSize,
uc = 1,nequal = 10)
library(scDDboost)
ls
PDD
data(sim_dat)
ls()
library(SummarizedExperiment)
data_count = assays(sim_dat)$counts
conditions = colData(sim_dat)$conditions
rownames(data_count) = 1:500
data_counts = assays(sim_dat)$counts
conditions = colData(sim_dat)$conditions
rownames(data_counts) = 1:500
head(data_counts)
rownames(data_counts)
dim(data_counts)
rownames(data_counts) = 1:1000
##here we use 1 core to compute the distance matrix
D = cal_D(data_count,1)
##here we use 1 core to compute the distance matrix
D_c = cal_D(data_count,1)
rm(data_count)
##here we use 1 core to compute the distance matrix
D_c = cal_D(data_counts,1)
##here we use 1 core to compute the distance matrix
D_c = cal_D(data_counts,1)
##number of subtypes
K = detK(D_c)
ccl = pam(D_c,k = K)$clustering
K
pdd = PDD(data = data_counts,cd = conditions, ncores = 1, D = D_c)
EDD = which(res > 0.95)
EDD = whichpdd > 0.95)
EDD = which(pdd > 0.95)
EDD
length(EDD)
PDD
detK
lsz
lsz(pdd)
lsz(pdd,0.05)
library(EBSeq)
GetPatterns()
GetPatterns
EBMultiTest
GetPatterns
EBMultiTest
